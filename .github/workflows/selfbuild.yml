on:
  workflow_dispatch:
  push:

jobs:
  documentation:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          lfs: true  # Включить поддержку Git LFS

      - name: Install Windows Dependencies
        run: |
          # Установка основных зависимостей
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          
          # Импорт профиля Chocolatey
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" -Force
          Update-SessionEnvironment
          
          # Проверка установленных версий
          ffmpeg -version
          pngquant --version
          magick -version
          git lfs version
          node --version

      - name: Install PowerShell Core
        run: |
          # Устанавливаем PowerShell Core
          choco install powershell-core -y --no-progress
          
          # Добавляем путь в переменную PATH
          $pwshPath = "C:\Program Files\PowerShell\7"
          echo "Adding PowerShell Core to PATH: $pwshPath"
          echo "$pwshPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          
          # Обновляем PATH для текущего шага
          $env:Path = "$pwshPath;$env:Path"
          
          # Проверяем установку
          pwsh --version

      - name: Install vgmstream
        run: |
          # Скачивание и распаковка vgmstream
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "vgmstream-temp" -Force
          
          # Создание папки bin и копирование файлов
          New-Item -ItemType Directory -Path "bin" -Force | Out-Null
          Copy-Item -Path "vgmstream-temp\vgmstream-cli.exe" -Destination "bin\" -Force
          
          # Очистка временных файлов
          Remove-Item -Path "vgmstream.zip", "vgmstream-temp" -Recurse -Force
          
          # Добавление bin в PATH
          $binPath = "$pwd\bin"
          echo "Adding bin to PATH: $binPath"
          echo "$binPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$binPath;$env:Path"
          
          # Проверка установки
          vgmstream-cli.exe -v

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install PDM
        run: |
          # Установка PDM через pip
          python -m pip install pdm
          
          # Добавление PDM в PATH
          $pdmPath = "$env:APPDATA\Python\Python311\Scripts"
          echo "Adding PDM to PATH: $pdmPath"
          echo "$pdmPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$pdmPath;$env:Path"
          
          # Проверка установки
          pdm --version

      - name: Setup PNPM
        run: |
          # Установка pnpm
          npm install -g pnpm
          
          # Добавление pnpm в PATH
          $pnpmPath = "$env:APPDATA\npm"
          echo "Adding PNPM to PATH: $pnpmPath"
          echo "$pnpmPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$pnpmPath;$env:Path"
          
          # Проверка установки
          pnpm -v

      - name: Verify Tools
        run: |
          # Проверка всех установленных инструментов
          echo "### Installed tools:"
          Get-Command python, node, pdm, pnpm, ffmpeg, pngquant, magick, git, vgmstream-cli | Format-Table Name, Source
          
          echo "### PATH:"
          $env:Path -split ';' | Where-Object { $_ } | Sort-Object | Out-Host
          
          echo "### Python version:"
          python -V
          
          echo "### Node version:"
          node -v

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      - name: Setup Python Environment
        run: |
          cd unpack
          
          # Инициализация PDM
          pdm use python
          pdm install --no-lock
          
          # Активация окружения
          .\.venv\Scripts\activate
          
          # Установка зависимостей
          pip install -r downloader/requirements.txt

      - name: Download Resources
        run: |
          cd unpack
          .\.venv\Scripts\activate
          
          # Подготовка директорий
          New-Item -ItemType Directory -Path "downloader/resdata" -Force
          Copy-Item -Path "gf-data-rus/resdata_no_hash.json" -Destination "downloader/resdata/us_resdata.json"
          
          cd downloader
          # Замена конфигурации
          (Get-Content config.json5) -replace '"ch"', '"us"' | Set-Content config.json5
          
          # Применение патча
          git apply ../downloader.patch
          
          # Создание архива
          Compress-Archive -Path "resdata/us_resdata.json" -DestinationPath "resdata.zip"
          
          # Загрузка ресурсов
          python downloader.py --downloadres 0 --abname

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}


      - name: Restore Cached Resources (images)
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/images
          key: gf-image-resources
      - name: Unpack images
        run: |
          cd unpack
          cp -r fixed-data/* gf-data-rus
          source .venv/bin/activate
          python tests/test_backgrounds.py
          python tests/test_characters.py
      - name: Cache Resources (images)
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}
      - name: Restore Cached Resources (audio)
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: |
            unpack/audio
          key: gf-audio-resources
      - name: Unpack audio
        run: |
          cd unpack
          source .venv/bin/activate
          python tests/test_audio.py
      - name: Cache Resources (audio)
        uses: actions/cache/save@v4
        with:
          path: |
            unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}
      - name: Unpack resources
        run: |
          cd unpack
          source .venv/bin/activate
          python -m gfunpack downloader/output -o .
      - name: Log Disk Space
        run: df -h

      - name: Move Resources
        run: |
          cd unpack
          # Создание целевых директорий
          New-Item -ItemType Directory -Path "../src/assets" -Force | Out-Null
          New-Item -ItemType Directory -Path "../public" -Force | Out-Null
          
          # Копирование файлов
          $assets = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )
          Copy-Item -Path $assets -Destination "../src/assets" -Force
          
          # Перемещение директорий
          $folders = @("audio", "images", "stories")
          Move-Item -Path $folders -Destination "../public" -Force
          
          # Проверка
          echo "Copied assets:"
          Get-ChildItem "../src/assets" | Format-Table Name
          echo "Moved folders:"
          Get-ChildItem "../public" | Format-Table Name

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: true  # Изменено на true

      - name: Install Node dependencies
        run: |
          # Обновление PATH для PNPM
          $pnpmPath = "$env:APPDATA\npm"
          $env:Path = "$pnpmPath;$env:Path"
          [Environment]::SetEnvironmentVariable("PATH", "$env:Path", "Process")
          
          pnpm --version
          pnpm install --frozen-lockfile --shamefully-hoist

      - name: Build Site
        run: |
          # Установка Node-зависимостей
          pnpm install --frozen-lockfile
            
          # Сборка проекта
          pnpm build-index
          pnpm build
            
          # Проверка результата сборки
          if (Test-Path -Path dist) {
           echo "dist folder created successfully"
           Get-ChildItem -Recurse dist | Format-Table FullName
          } else {
           Write-Error "dist folder not found!"
           Get-ChildItem -Recurse | Format-Table FullName
           exit 1
           }

      - name: Upload dist as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist-debug
          path: dist
          retention-days: 1

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
        timeout-minutes: 10