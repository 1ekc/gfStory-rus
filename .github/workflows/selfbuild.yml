name: Build Documentation

on:
  workflow_dispatch:
  push:

jobs:
  documentation:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      # Установка необходимых глобальных зависимостей
      - name: Setup Prerequisites
        run: |
          choco install -y git nodejs python3
          refreshenv

      - name: Log Disk Space
        run: Get-PSDrive C | Format-Table

      - name: Free Disk Space
        run: |
          Remove-Item -Path "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
          Clear-RecycleBin -Force -ErrorAction SilentlyContinue

      - name: Install Dependencies
        run: |
          choco install -y ffmpeg imagemagick pngquant
          refreshenv

          # Проверка установленных версий
          ffmpeg -version
          magick -version
          pngquant --version

          # Скачивание vgmstream
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream-win64.zip"
          Expand-Archive -Path "vgmstream-win64.zip" -DestinationPath "vgmstream"
          New-Item -ItemType Directory -Path "bin" -Force
          Move-Item -Path "vgmstream/test.exe" -Destination "bin/vgmstream-cli.exe"
          
          # Добавление bin в PATH
          $env:PATH = "$pwd\bin;$env:PATH"
          [Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$pwd\bin", "Machine")
          echo "::add-path::$pwd\bin"

      # ... (остальные шаги до "Move Resources" остаются без изменений) ...

      - name: Move Resources
        run: |
          cd unpack
          # Проверка существования файлов перед копированием
          $files = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )
          
          foreach ($file in $files) {
              if (-not (Test-Path $file)) {
                  Write-Error "Missing file: $file"
              }
          }
          
          # Копирование с проверкой
          Copy-Item -Path $files -Destination "../src/assets" -Force
          
          # Проверка существования папок перед перемещением
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              if (-not (Test-Path $folder)) {
                  Write-Error "Missing folder: $folder"
              }
          }
          
          Move-Item -Path $folders -Destination "../public" -Force
          
          # Логирование структуры public
          echo "### Public folder structure:"
          Get-ChildItem -Recurse ../public | Format-Table FullName

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.4.0
          run_install: false

      - name: Install Node dependencies
        run: |
          # Проверка версий
          node -v
          pnpm -v
          
          pnpm install --frozen-lockfile
          
          # Логирование установленных зависимостей
          pnpm list --depth 0

      - name: Build Site (debug)
        run: |
          echo "### Current directory: $pwd"
          echo "### Source assets:"
          Get-ChildItem -Recurse src/assets | Format-Table FullName
          
          echo "### Public folder:"
          Get-ChildItem -Recurse public | Format-Table FullName
          
          # Запуск сборки с подробным выводом
          pnpm build-index --verbose
          pnpm build --verbose
          
          # Проверка существования dist
          if (Test-Path -Path dist) {
              echo "### dist folder content:"
              Get-ChildItem -Recurse dist | Format-Table FullName
          } else {
              Write-Error "dist folder not created!"
              exit 1
          }

      - name: Upload dist as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dist-debug
          path: dist
          retention-days: 1

      # Раскомментируйте после успешной сборки
      #- name: Publish to Cloudflare Pages
      #  uses: cloudflare/pages-action@v1
      #  with:
      #    apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      #    accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      #    projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
      #    directory: dist