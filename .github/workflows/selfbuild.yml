name: Build and Deploy Documentation

on:
  workflow_dispatch:
  push:

jobs:
  documentation:
    runs-on: self-hosted
    defaults:
      run:
        shell: powershell

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          lfs: true

      - name: Install System Dependencies
        run: |
          choco install ffmpeg pngquant imagemagick git-lfs nodejs -y --no-progress
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1" -Force
          Update-SessionEnvironment
          ffmpeg -version
          pngquant --version
          magick -version
          git lfs version
          node --version
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          lfs: true
          fetch-depth: 0

      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull --include="unpack/gf-data-rus"
          
          # Рекурсивная инициализация LFS для всех подмодулей
          git submodule foreach 'git lfs install'
          git submodule foreach 'git lfs pull'

      - name: Verify Submodule Content
        run: |
          $submodulePath = "unpack/gf-data-rus/formatted"
          echo "### Content of $submodulePath:"
          Get-ChildItem -Path $submodulePath -Recurse | Format-Table FullName
          
          $fileCount = (Get-ChildItem -Path $submodulePath -Recurse -File).Count
          if ($fileCount -lt 10) {
              Write-Error "Submodule contains only $fileCount files! Expected more."
              exit 1
          }

      - name: Install vgmstream
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/vgmstream/vgmstream-releases/releases/download/nightly/vgmstream-win64.zip" -OutFile "vgmstream.zip"
          New-Item -ItemType Directory -Path "bin" -Force | Out-Null
          Expand-Archive -Path "vgmstream.zip" -DestinationPath "bin" -Force
          Remove-Item -Path "vgmstream.zip" -Force
          
          $binPath = "$pwd\bin"
          echo "Adding bin to PATH: $binPath"
          echo "$binPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$binPath;$env:Path"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'

      - name: Install PDM
        run: |
          python -m pip install pdm
          $pdmPath = "$env:APPDATA\Python\Python311\Scripts"
          echo "Adding PDM to PATH: $pdmPath"
          echo "$pdmPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$pdmPath;$env:Path"
          pdm --version

      - name: Setup PNPM
        run: |
          npm install -g pnpm
          $pnpmPath = "$env:APPDATA\npm"
          echo "Adding PNPM to PATH: $pnpmPath"
          echo "$pnpmPath" | Out-File -FilePath $env:GITHUB_PATH -Append -Encoding utf8
          $env:Path = "$pnpmPath;$env:Path"
          pnpm -v

      - name: Restore Cached Resources
        id: restore-gf-downloader-resources
        uses: actions/cache/restore@v4
        with:
          path: unpack/downloader/output
          key: gf-downloader-resources-${{ runner.os }}

      - name: Setup Python Environment
        run: |
          cd unpack
          pdm use python
          pdm install --no-lock
          .\.venv\Scripts\activate
          pip install -r downloader/requirements.txt

      - name: Download Resources
        run: |
          cd unpack
          .\.venv\Scripts\activate

          New-Item -ItemType Directory -Path "downloader/resdata" -Force
          $srcFile = "gf-data-rus/resdata_no_hash.json"
          $destFile = "downloader/resdata/us_resdata.json"

          # Удаляем старый файл, если существует
          if (Test-Path $destFile) {
              Remove-Item -Path $destFile -Force
          }
          Copy-Item -Path $srcFile -Destination $destFile -Force

      - name: Cache Downloaded Resources
        uses: actions/cache/save@v4
        with:
          path: unpack/downloader/output
          key: ${{ steps.restore-gf-downloader-resources.outputs.cache-primary-key }}

      - name: Restore Cached Images
        id: restore-image-resources
        uses: actions/cache/restore@v4
        with:
          path: unpack/images
          key: gf-image-resources-${{ runner.os }}

      - name: Unpack images
        run: |
          cd unpack

          # Синхронизация содержимого с перезаписью существующих файлов
          $source = "fixed-data"
          $destination = "gf-data-rus"

          # Создаем папку назначения, если её нет
          New-Item -ItemType Directory -Path $destination -Force | Out-Null

          # Копируем с перезаписью
          Get-ChildItem -Path $source | ForEach-Object {
              $destPath = Join-Path -Path $destination -ChildPath $_.Name
              if (Test-Path -Path $destPath) {
                  Remove-Item -Path $destPath -Recurse -Force -ErrorAction SilentlyContinue
              }
              Copy-Item -Path $_.FullName -Destination $destination -Recurse -Force
          }

          .\.venv\Scripts\activate
          python tests/test_backgrounds.py
          python tests/test_characters.py

      - name: Cache Resources (Images)
        uses: actions/cache/save@v4
        with:
          path: unpack/images
          key: ${{ steps.restore-image-resources.outputs.cache-primary-key }}

      - name: Restore Cached Audio
        id: restore-audio-resources
        uses: actions/cache/restore@v4
        with:
          path: unpack/audio
          key: gf-audio-resources-${{ runner.os }}

      - name: Unpack Audio
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python tests/test_audio.py

      - name: Cache Resources (Audio)
        uses: actions/cache/save@v4
        with:
          path: unpack/audio
          key: ${{ steps.restore-audio-resources.outputs.cache-primary-key }}

      - name: Final Unpacking
        run: |
          cd unpack
          .\.venv\Scripts\activate
          python -m gfunpack downloader/output -o .

      - name: Move Resources
        run: |
          cd unpack

          # Для каждого файла в assets
          $assets = @(
              "audio/audio.json",
              "images/backgrounds.json",
              "images/characters.json",
              "stories/stories.json",
              "stories/chapters.json"
          )

          foreach ($file in $assets) {
              $dest = "../src/assets/$($file | Split-Path -Leaf)"
              if (Test-Path $dest) {
                  Remove-Item -Path $dest -Force
              }
              Copy-Item -Path $file -Destination "../src/assets" -Force
          }

          # Для каждой папки
          $folders = @("audio", "images", "stories")
          foreach ($folder in $folders) {
              $dest = "../public/$folder"
              if (Test-Path $dest) {
                  Remove-Item -Path $dest -Recurse -Force
              }
              Move-Item -Path $folder -Destination "../public" -Force
          }

      - name: Install Frontend Dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build Frontend
        run: |
          pnpm build-index
          pnpm build
          
          # Verify build output
          if (Test-Path -Path dist) {
              echo "Build successful! dist folder content:"
              Get-ChildItem -Recurse dist | Format-Table FullName
          } else {
              Write-Error "Build failed: dist folder not found!"
              exit 1
          }

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: dist
        timeout-minutes: 15